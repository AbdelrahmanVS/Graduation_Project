// <auto-generated />
using System;
using ITIGraduation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITIGraduation.Migrations.Spark
{
    [DbContext(typeof(SparkContext))]
    partial class SparkContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SparkMain.Models.Boot", b =>
                {
                    b.Property<int>("BootId")
                        .HasColumnType("int")
                        .HasColumnName("boot_id");

                    b.Property<string>("BootName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("boot_name");

                    b.Property<string>("ImagUrl")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("imag_url");

                    b.Property<int?>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int?>("Size")
                        .HasColumnType("int")
                        .HasColumnName("size");

                    b.HasKey("BootId")
                        .HasName("PK__boots__A1BFC0423832348B");

                    b.ToTable("boots", (string)null);
                });

            modelBuilder.Entity("SparkMain.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int")
                        .HasColumnName("quantity_available");

                    b.Property<int>("ShoeId")
                        .HasColumnType("int")
                        .HasColumnName("shoe_id");

                    b.Property<string>("ShoeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("shoe_name");

                    b.Property<string>("ShoeType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("shoe_type");

                    b.HasKey("InventoryId")
                        .HasName("PK__inventor__B59ACC4925EA3DC3");

                    b.HasIndex(new[] { "ShoeType", "ShoeId" }, "UQ_inventory_shoe")
                        .IsUnique();

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("SparkMain.Models.Oxford", b =>
                {
                    b.Property<int>("OxfordId")
                        .HasColumnType("int")
                        .HasColumnName("oxford_id");

                    b.Property<string>("BootName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("boot_name");

                    b.Property<string>("ImagUrl")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("imag_url");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Size")
                        .HasColumnType("int")
                        .HasColumnName("size");

                    b.HasKey("OxfordId")
                        .HasName("PK__oxford__D49DEDC900C25A6B");

                    b.ToTable("oxford", (string)null);
                });

            modelBuilder.Entity("SparkMain.Models.Prouduct", b =>
                {
                    b.Property<int>("ProuductId")
                        .HasColumnType("int")
                        .HasColumnName("Prouduct_id");

                    b.Property<string>("ImagUrl")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("imag_url");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ProuductName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Prouduct_name");

                    b.Property<int?>("Size")
                        .HasColumnType("int")
                        .HasColumnName("size");

                    b.HasKey("ProuductId")
                        .HasName("PK__Prouduct__0D534CAB3AB37D03");

                    b.ToTable("Prouduct", (string)null);
                });

            modelBuilder.Entity("SparkMain.Models.Sport", b =>
                {
                    b.Property<int>("SportId")
                        .HasColumnType("int")
                        .HasColumnName("sport_id");

                    b.Property<string>("ImagUrl")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("imag_url");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Size")
                        .HasColumnType("int")
                        .HasColumnName("size");

                    b.Property<string>("SportName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sport_name");

                    b.HasKey("SportId")
                        .HasName("PK__sport__0439264189FA7CDC");

                    b.ToTable("sport", (string)null);
                });

            modelBuilder.Entity("SparkMain.Models.TrendingSelling", b =>
                {
                    b.Property<int>("ProudId")
                        .HasColumnType("int")
                        .HasColumnName("Proud_id");

                    b.Property<string>("Imag2")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("imag2");

                    b.Property<string>("Imag3")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("imag3");

                    b.Property<string>("Imag4")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("imag4");

                    b.Property<string>("ImagUrl")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("imag_url");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ProudName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Proud_name");

                    b.Property<int?>("Size")
                        .HasColumnType("int")
                        .HasColumnName("size");

                    b.HasKey("ProudId")
                        .HasName("PK__Trending__A698124A20DF5AAE");

                    b.ToTable("Trending_selling", (string)null);
                });

            modelBuilder.Entity("SparkMain.Models.User", b =>
                {
                    b.Property<int>("UsersId")
                        .HasColumnType("int")
                        .HasColumnName("users_id");

                    b.Property<string>("Country")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("country");

                    b.Property<string>("Gmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("gmail");

                    b.Property<int?>("Password")
                        .HasColumnType("int")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("user_name");

                    b.HasKey("UsersId")
                        .HasName("PK__USERS__EAA7D14B9FC4913F");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("SparkMain.Models.UserBootPurchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    b.Property<int?>("BootId")
                        .HasColumnType("int")
                        .HasColumnName("boot_id");

                    b.Property<decimal?>("BootPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("boot_price");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("purchase_date");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PurchaseId")
                        .HasName("PK__user_boo__87071CB9E02D8182");

                    b.HasIndex("BootId");

                    b.HasIndex("UserId");

                    b.ToTable("user_boot_purchases", (string)null);
                });

            modelBuilder.Entity("SparkMain.Models.UserOxfordPurchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    b.Property<decimal?>("BootPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("boot_price");

                    b.Property<int?>("OxfordId")
                        .HasColumnType("int")
                        .HasColumnName("oxford_id");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("purchase_date");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PurchaseId")
                        .HasName("PK__user_oxf__87071CB9735CB860");

                    b.HasIndex("OxfordId");

                    b.HasIndex("UserId");

                    b.ToTable("user_oxford_purchases", (string)null);
                });

            modelBuilder.Entity("SparkMain.Models.UserSportPurchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    b.Property<decimal?>("BootPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("boot_price");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("purchase_date");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("SportId")
                        .HasColumnType("int")
                        .HasColumnName("sport_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PurchaseId")
                        .HasName("PK__user_spo__87071CB9435D3EEE");

                    b.HasIndex("SportId");

                    b.HasIndex("UserId");

                    b.ToTable("user_sport_purchases", (string)null);
                });

            modelBuilder.Entity("SparkMain.Models.UserBootPurchase", b =>
                {
                    b.HasOne("SparkMain.Models.Boot", "Boot")
                        .WithMany("UserBootPurchases")
                        .HasForeignKey("BootId")
                        .HasConstraintName("FK__user_boot__boot___7D439ABD");

                    b.HasOne("SparkMain.Models.User", "User")
                        .WithMany("UserBootPurchases")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__user_boot__user___7C4F7684");

                    b.Navigation("Boot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SparkMain.Models.UserOxfordPurchase", b =>
                {
                    b.HasOne("SparkMain.Models.Oxford", "Oxford")
                        .WithMany("UserOxfordPurchases")
                        .HasForeignKey("OxfordId")
                        .HasConstraintName("FK__user_oxfo__oxfor__08B54D69");

                    b.HasOne("SparkMain.Models.User", "User")
                        .WithMany("UserOxfordPurchases")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__user_oxfo__user___07C12930");

                    b.Navigation("Oxford");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SparkMain.Models.UserSportPurchase", b =>
                {
                    b.HasOne("SparkMain.Models.Sport", "Sport")
                        .WithMany("UserSportPurchases")
                        .HasForeignKey("SportId")
                        .HasConstraintName("FK__user_spor__sport__02FC7413");

                    b.HasOne("SparkMain.Models.User", "User")
                        .WithMany("UserSportPurchases")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__user_spor__user___02084FDA");

                    b.Navigation("Sport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SparkMain.Models.Boot", b =>
                {
                    b.Navigation("UserBootPurchases");
                });

            modelBuilder.Entity("SparkMain.Models.Oxford", b =>
                {
                    b.Navigation("UserOxfordPurchases");
                });

            modelBuilder.Entity("SparkMain.Models.Sport", b =>
                {
                    b.Navigation("UserSportPurchases");
                });

            modelBuilder.Entity("SparkMain.Models.User", b =>
                {
                    b.Navigation("UserBootPurchases");

                    b.Navigation("UserOxfordPurchases");

                    b.Navigation("UserSportPurchases");
                });
#pragma warning restore 612, 618
        }
    }
}
